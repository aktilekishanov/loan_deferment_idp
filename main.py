import os
from datetime import datetime
import re
import json
import io
import time
import random

import boto3
from botocore.exceptions import BotoCoreError, NoCredentialsError, ClientError
import streamlit as st

# ======================= UI –ß–ê–°–¢–¨ =========================
st.set_page_config(page_title="S3 File Uploader", layout="centered")

st.write("")
st.title("RB Loan Deferment IDP")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω —Ñ–∞–π–ª –≤ Amazon S3 –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ---
AWS_PROFILE = ""   # –ø—Ä–æ—Ñ–∏–ª—å AWS –∏–∑ ~/.aws/credentials (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è env/role)
AWS_REGION = "us-east-1"   # —Ä–µ–≥–∏–æ–Ω AWS
BEDROCK_REGION = "us-east-1"  # —Ä–µ–≥–∏–æ–Ω Bedrock
MODEL_ID = "anthropic.claude-3-5-sonnet-20240620-v1:0"  # –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è LLM –º–æ–¥–µ–ª—å
BUCKET_NAME = "loan-deferment-idp-test-tlek"  # –∏–º—è S3-–±–∞–∫–µ—Ç–∞
KEY_PREFIX = "uploads/"  # –±–∞–∑–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫

# --- –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---\
st.markdown("""
<style>
.block-container{max-width:980px;padding-top:1.25rem;}
.meta{color:#6b7280;font-size:0.92rem;margin:0.25rem 0 1rem 0;}
.meta code{background:#f3f4f6;border:1px solid #e5e7eb;padding:2px 6px;border-radius:6px;}
.card{border:1px solid #e5e7eb;border-radius:14px;background:#ffffff;box-shadow:0 2px 8px rgba(0,0,0,.04);} 
.card.pad{padding:22px;}
.result-card{border:1px solid #e5e7eb;border-radius:14px;padding:16px;background:#fafafa;}
.stButton>button{border-radius:10px;padding:.65rem 1rem;font-weight:600;}
.stDownloadButton>button{border-radius:10px;}
</style>
""", unsafe_allow_html=True)

with st.expander("–ü–æ–º–æ—â—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", expanded=False):
    tabs = st.tabs(["–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–°–æ–∑–¥–∞–Ω–∏–µ Access Key", "–û–∫—Ä—É–∂–µ–Ω–∏–µ"])
    with tabs[0]:
        st.markdown("#### 1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ AWS CLI v2")
        st.code('''curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"\nsudo installer -pkg AWSCLIV2.pkg -target /''', language="bash")
        st.code("aws --version", language="bash")
        st.markdown("#### 2) –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.code("aws configure", language="bash")
        st.markdown("#### 3) –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        st.code("streamlit run main.py", language="bash")
    with tabs[1]:
        st.markdown("### üîë –°–æ–∑–¥–∞–Ω–∏–µ Access Key (CLI)")
        st.markdown("–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –∫–ª—é—á–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ –∫–æ–¥–∞/CLI. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –≤ AWS IAM.")
    with tabs[2]:
        st.markdown("### –û–∫—Ä—É–∂–µ–Ω–∏–µ")
        st.markdown(f"- Bucket: `{BUCKET_NAME}`\n- Region: `{AWS_REGION}`\n- Model: `{MODEL_ID}`")

# --- –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ---
with st.form("upload_form", clear_on_submit=False):
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç",
        type=["pdf", "jpg"],
        accept_multiple_files=False,
        help="–ü–æ–¥–¥–µ—Ä–∂–∫–∞: PDF, JPEG",
    )
    submitted = st.form_submit_button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å", type="primary")


# ===================== –§–£–ù–ö–¶–ò–ò ============================

def get_s3_client(profile, region_name):
    if profile:
        session = boto3.session.Session(profile_name=profile, region_name=region_name or None)
        return session.client("s3")
    return boto3.client("s3", region_name=region_name or None)

def get_next_upload_folder(s3_client, bucket, prefix):
    try:
        paginator = s3_client.get_paginator("list_objects_v2")
        existing_max = 0
        for page in paginator.paginate(Bucket=bucket, Prefix=prefix, Delimiter="/"):
            for cp in page.get("CommonPrefixes", []) or []:
                p = cp.get("Prefix", "")
                m = re.search(r"upload_id_(\d{3,})/\Z", p)
                if m:
                    existing_max = max(existing_max, int(m.group(1)))
        next_id = existing_max + 1
        return f"{prefix}upload_id_{next_id:03d}/"
    except Exception:
        ts = datetime.utcnow().strftime("%Y%m%d-%H%M%S")
        return f"{prefix}upload_id_{ts}/"

def textract_blocks_to_text(tex_resp: dict) -> str:
    lines = [b.get("Text", "") for b in tex_resp.get("Blocks", []) if b.get("BlockType") == "LINE"]
    return "\n".join([ln for ln in lines if ln])

# --- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π (Textract SIGNATURES) —Å backoff ---
def detect_signatures(textract_client, bucket: str, key: str, content_type: str):
    results = []
    try:
        is_pdf = ("pdf" in (content_type or "").lower()) or key.lower().endswith(".pdf")
        if not is_pdf:
            s3 = boto3.client("s3")
            obj = s3.get_object(Bucket=bucket, Key=key)
            img_bytes = obj["Body"].read()
            resp = textract_client.analyze_document(Document={"Bytes": img_bytes}, FeatureTypes=["SIGNATURES"])
            for b in resp.get("Blocks", []) or []:
                if b.get("BlockType") == "SIGNATURE":
                    results.append({"confidence": b.get("Confidence"), "geometry": b.get("Geometry"), "page": b.get("Page")})
        else:
            start = textract_client.start_document_analysis(
                DocumentLocation={"S3Object": {"Bucket": bucket, "Name": key}},
                FeatureTypes=["SIGNATURES"],
            )
            job_id = start["JobId"]
            pages = []

            # Backoff —Ñ—É–Ω–∫—Ü–∏—è
            def get_document_analysis_with_backoff(job_id, max_retries=6):
                retries = 0
                while True:
                    try:
                        resp = textract_client.get_document_analysis(JobId=job_id, MaxResults=1000)
                        return resp
                    except ClientError as e:
                        if e.response['Error']['Code'] == "ThrottlingException":
                            wait = (2 ** retries) + random.random()
                            time.sleep(wait)
                            retries += 1
                            if retries > max_retries:
                                raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–∑-–∑–∞ ThrottlingException")
                        else:
                            raise

            while True:
                resp = get_document_analysis_with_backoff(job_id)
                status = resp["JobStatus"]
                if status == "SUCCEEDED":
                    pages.append(resp)
                    next_token = resp.get("NextToken")
                    while next_token:
                        nxt = get_document_analysis_with_backoff(job_id)
                        pages.append(nxt)
                        next_token = nxt.get("NextToken")
                    break
                elif status == "FAILED":
                    raise Exception("Textract –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
                else:
                    time.sleep(2 + random.random())

            for page in pages:
                for b in page.get("Blocks", []) or []:
                    if b.get("BlockType") == "SIGNATURE":
                        results.append({"confidence": b.get("Confidence"), "geometry": b.get("Geometry"), "page": b.get("Page")})

    except Exception as e:
        return {"signatures": [], "error": str(e)}
    return {"signatures": results, "error": None}

# --- –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–µ—á–∞—Ç–µ–π (Rekognition) ---
def detect_stamp_rekognition(bucket: str, key: str, content_type: str):
    try:
        is_pdf = ("pdf" in (content_type or "").lower()) or key.lower().endswith(".pdf")
        if is_pdf:
            return {"stamps": [], "error": None}
        rek = boto3.client("rekognition")
        resp = rek.detect_labels(Image={"S3Object": {"Bucket": bucket, "Name": key}}, MaxLabels=50, MinConfidence=70)
        interesting = {"Stamp", "Seal", "Emblem", "Logo", "Badge", "Symbol", "Trademark"}
        hits = []
        for lbl in resp.get("Labels", []) or []:
            if lbl.get("Name") in interesting:
                insts = [{"confidence": i.get("Confidence"), "bounding_box": i.get("BoundingBox")} for i in (lbl.get("Instances", []) or [])]
                hits.append({"name": lbl.get("Name"), "confidence": lbl.get("Confidence"), "instances": insts})
        return {"stamps": hits, "error": None}
    except Exception as e:
        return {"stamps": [], "error": str(e)}

def build_prompt_russian(extracted_text: str) -> str:
    instruction = (
        "–ò–∑–≤–ª–µ–∫–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞.\n"
        "–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n"
        "{\n"
        "  \"–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\": string | null,\n"
        "  \"–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞\": string | null,\n"
        "  \"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\": string | null,\n"
        "  \"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ —Å–ø—Ä–∞–≤–∫–∏\": string | null,\n"
        "  \"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞\": string | null,\n"
        "  \"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞\": string | null,\n"
        "  \"–§–ò–û –∫–æ–º—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–ø—É—Å–∫\": string | null,\n"
        "  \"–≥–æ—Ä–æ–¥\": string | null\n"
        "}\n\n"
        "–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
    )
    return instruction + extracted_text

def get_bedrock_client(profile: str | None, region_name: str | None):
    if profile:
        session = boto3.session.Session(profile_name=profile, region_name=region_name or None)
        return session.client("bedrock-runtime")
    return boto3.client("bedrock-runtime", region_name=region_name or None)

def call_bedrock_invoke(model_id: str, prompt: str, client):
    if model_id.startswith("anthropic."):
        body = {
            "anthropic_version": "bedrock-2023-05-31",
            "max_tokens": 1024,
            "temperature": 0,
            "messages": [{"role": "user", "content": [{"type": "text", "text": prompt}]}],
        }
        resp = client.invoke_model(
            modelId=model_id,
            contentType="application/json",
            accept="application/json",
            body=json.dumps(body),
        )
        data = json.loads(resp["body"].read())
        return data.get("content", [{}])[0].get("text", "")
    else:
        body = {"inputText": prompt, "textGenerationConfig": {"maxTokenCount": 1024, "temperature": 0}}
        resp = client.invoke_model(
            modelId=model_id,
            contentType="application/json",
            accept="application/json",
            body=json.dumps(body),
        )
        data = json.loads(resp["body"].read())
        if "results" in data and data["results"]:
            return data["results"][0].get("outputText", "")
        return json.dumps(data)

# =============== –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° =========================
if submitted:
    if not BUCKET_NAME:
        st.error("S3-–±–∞–∫–µ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    elif not uploaded_file:
        st.error("–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
    else:
        try:
            s3 = get_s3_client(AWS_PROFILE.strip() or None, AWS_REGION)
            progress = st.progress(0)

            original_name = uploaded_file.name
            base_prefix = (KEY_PREFIX or "").strip() or "uploads/"
            if base_prefix and not base_prefix.endswith("/"):
                base_prefix += "/"

            upload_folder = get_next_upload_folder(s3, BUCKET_NAME, base_prefix)
            key = f"{upload_folder}{original_name}"

            uploaded_file.seek(0)
            content_type = getattr(uploaded_file, "type", None) or "application/octet-stream"
            with st.status("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...", expanded=False) as status:
                s3.upload_fileobj(
                    Fileobj=uploaded_file,
                    Bucket=BUCKET_NAME,
                    Key=key,
                    ExtraArgs={"ContentType": content_type},
                )
                status.update(label="–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", state="complete")
            progress.progress(30)

            s3_uri = f"s3://{BUCKET_NAME}/{key}"
            st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {s3_uri}")

            st.session_state["last_s3_bucket"] = BUCKET_NAME
            st.session_state["last_s3_key"] = key
            st.session_state["last_s3_uri"] = s3_uri

            try:
                with st.status("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...", expanded=False) as status:
                    status.update(label="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Textract...", state="running")
                    if AWS_PROFILE.strip():
                        session = boto3.session.Session(profile_name=AWS_PROFILE.strip(), region_name=AWS_REGION)
                        textract = session.client("textract")
                    else:
                        textract = boto3.client("textract", region_name=AWS_REGION)

                    tex_resp = textract.detect_document_text(Document={"S3Object": {"Bucket": BUCKET_NAME, "Name": key}})
                    progress.progress(60)

                    # –ü–æ–¥–ø–∏—Å–∏ –∏ –ø–µ—á–∞—Ç–∏
                    signature_hits = detect_signatures(textract, BUCKET_NAME, key, content_type)
                    stamp_hits = detect_stamp_rekognition(BUCKET_NAME, key, content_type)

                    status.update(label="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ Bedrock...", state="running")
                    extracted_text = textract_blocks_to_text(tex_resp)[:15000]
                    bedrock = get_bedrock_client(AWS_PROFILE.strip() or None, BEDROCK_REGION)
                    prompt = build_prompt_russian(extracted_text)
                    model_output = call_bedrock_invoke(MODEL_ID, prompt, bedrock)
                    progress.progress(90)

                    try:
                        parsed = json.loads(model_output)
                    except Exception:
                        start = model_output.find("{")
                        end = model_output.rfind("}")
                        parsed = None
                        if start != -1 and end != -1 and end > start:
                            try:
                                parsed = json.loads(model_output[start:end+1])
                            except Exception:
                                parsed = None
                    if parsed is None:
                        parsed = {"–û—à–∏–±–∫–∞": "LLM –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON"}

                    parsed["_signatures"] = signature_hits
                    parsed["_stamps"] = stamp_hits

                    status.update(label="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –≤ S3...", state="running")
                    folder = key.rsplit("/", 1)[0] + "/" if "/" in key else ""
                    json_key = f"{folder}extraction-{datetime.utcnow().strftime('%Y%m%d-%H%M%S')}.json"
                    payload = json.dumps(parsed, ensure_ascii=False, indent=2).encode("utf-8")
                    bio = io.BytesIO(payload)
                    s3.upload_fileobj(
                        Fileobj=bio,
                        Bucket=BUCKET_NAME,
                        Key=json_key,
                        ExtraArgs={"ContentType": "application/json; charset=utf-8"},
                    )
                    status.update(label="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", state="complete")
                progress.progress(100)

                # ===================== –†–ï–ó–£–õ–¨–¢–ê–¢ (—É–ª—É—á—à–µ–Ω–Ω—ã–π UI) =====================
                st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç")

                # –ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å—ã
                signatures_info = parsed.get("_signatures") or {}
                stamps_info = parsed.get("_stamps") or {}
                signatures = signatures_info.get("signatures") or [] if isinstance(signatures_info, dict) else []
                stamps = stamps_info.get("stamps") or [] if isinstance(stamps_info, dict) else []

                col1, col2, col3 = st.columns([1, 1, 2])
                with col1:
                    st.metric(label="–ü–æ–¥–ø–∏—Å–∏ (Textract)", value=len(signatures))
                with col2:
                    st.metric(label="–ü–µ—á–∞—Ç–∏/–ª–æ–≥–æ—Ç–∏–ø—ã (Rekognition)", value=len(stamps))
                with col3:
                    st.caption(f"S3: s3://{BUCKET_NAME}/{json_key}")

                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                llm_error = parsed.get("–û—à–∏–±–∫–∞")
                sig_err = signatures_info.get("error") if isinstance(signatures_info, dict) else None
                stamp_err = stamps_info.get("error") if isinstance(stamps_info, dict) else None
                if llm_error:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ LLM: {llm_error}")
                if sig_err:
                    st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–µ–π: {sig_err}")
                if stamp_err:
                    st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–µ—á–∞—Ç–µ–π: {stamp_err}")

                # –¢–∞–±—ã: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ | –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ | JSON
                tab_structure, tab_diag, tab_json = st.tabs(["–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON)"])

                # --- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è ---
                with tab_structure:
                    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª—é—á–∏
                    user_fields = {k: v for k, v in parsed.items() if not str(k).startswith("_") and k != "–û—à–∏–±–∫–∞"}
                    if not user_fields:
                        st.info("–ù–µ—Ç –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    else:
                        # –¢–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ = –æ–¥–Ω–∞ –ø–∞—Ä–∞ (–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ)
                        items = list(user_fields.items())
                        rows = [{"–ü–æ–ª–µ": k, "–ó–Ω–∞—á–µ–Ω–∏–µ": (v if v not in (None, "") else "‚Äî")} for k, v in items]

                        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∞—Ç –ø–æ –ø–æ–¥–ø–∏—Å—è–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
                        try:
                            if signatures:
                                confidences = [s.get("confidence") for s in signatures if isinstance(s, dict) and s.get("confidence") is not None]
                                if confidences:
                                    max_conf = max(confidences)
                                    # Textract –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [0..100]
                                    cr_text = f"–æ–±–Ω–∞—Ä—É–∂–µ–Ω (CR {round(max_conf)}%)"
                                else:
                                    cr_text = "–æ–±–Ω–∞—Ä—É–∂–µ–Ω"
                            else:
                                cr_text = "–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
                        except Exception:
                            cr_text = "–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"

                        rows = ([{"–ü–æ–ª–µ": "–ü–æ–¥–ø–∏—Å—å", "–ó–Ω–∞—á–µ–Ω–∏–µ": cr_text}] + rows)
                        st.table(rows)

                # --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ---
                with tab_diag:
                    st.markdown("#### –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π")
                    if signatures:
                        st.json({"count": len(signatures), "items": signatures})
                    else:
                        st.caption("–ü–æ–¥–ø–∏—Å–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")

                    st.markdown("#### –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–µ—á–∞—Ç–µ–π / –ª–æ–≥–æ—Ç–∏–ø–æ–≤")
                    if stamps:
                        st.json({"count": len(stamps), "items": stamps})
                    else:
                        st.caption("–ü–µ—á–∞—Ç–∏/–ª–æ–≥–æ—Ç–∏–ø—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ –¥–ª—è PDF.")

                # --- –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ ---
                with tab_json:
                    st.json(parsed)
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å JSON",
                        data=json.dumps(parsed, ensure_ascii=False, indent=2).encode("utf-8"),
                        file_name="extraction.json",
                        mime="application/json",
                        use_container_width=True,
                    )

            except ClientError as e:
                err = e.response.get("Error", {})
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {err.get('Code', 'Unknown')} - {err.get('Message', str(e))}")
            except Exception as e:
                st.error(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")

        except NoCredentialsError:
            st.error("AWS-—É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ ~/.aws/credentials –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        except ClientError as e:
            err = e.response.get("Error", {})
            st.error(f"AWS ClientError: {err.get('Code', 'Unknown')} - {err.get('Message', str(e))}")
        except (BotoCoreError, Exception) as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
